
# =============================================================================
# Kedro ML Pipeline Parameters - 표준화된 버전
# =============================================================================
# 
# 이 파일은 Kedro 파이프라인의 모든 파라미터를 정의합니다.
# 각 스테이지별로 섹션이 구분되어 있으며, 다음과 같은 방법으로 사용됩니다:
#
# 1. Kedro Node에서 파라미터 접근:
#    - 전역 파라미터: parameters["target_column"]
#    - 스테이지별 파라미터: parameters["stage_1"]["validation"]["enable_validation"]
#
# 2. YAML 앵커(&)와 별칭(*)을 사용한 값 재사용:
#    - 정의: &anchor_name "value"
#    - 참조: *anchor_name
#
# 3. 파이프라인 실행 시 파라미터 오버라이드:
#    kedro run --params "stage_1.validation.enable_validation:false"
#
# =============================================================================

# 프로젝트 정보
project_name: "accounting_classification_mlops"
version: "v7.0_mlflow_based"

# 전역 설정 (모든 스테이지에서 접근 가능)
target_column: "vat_type"  # 예측 대상 컬럼

# =============================================================================
# 전역 저장 옵션 설정 (모든 스테이지에 기본 적용)
# =============================================================================
save_options:
  # 기본 저장 모드 설정
  default:
    enabled: true                    # 저장 활성화 여부 (false면 저장 안 함)
    storage_location: "mlflow_only"         # "mlflow_only", "local_only", "both"
  
  # 스테이지별 예외 설정 (기본 설정을 오버라이드)
  stage_overrides:
    stage_0:
      enabled: true
      storage_location: "mlflow_only"      # Stage 0은 시작점이므로 둘 다 저장
    stage_1:
      enabled: true
      storage_location: "mlflow_only"
    stage_2:
      enabled: true  
      storage_location: "mlflow_only"
    stage_3:
      enabled: true
      storage_location: "mlflow_only"      # 중요 체크포인트
    stage_4:
      enabled: true
      storage_location: "mlflow_only"
    stage_5:
      enabled: true  
      storage_location: "mlflow_only"
    stage_6:
      enabled: fasle
      storage_location: "mlflow_only"      # 분할 지점이므로 중요
    stage_7:
      enabled: true
      storage_location: "mlflow_only"
    stage_8:
      enabled: true
      storage_location: "mlflow_only"
    stage_9:
      enabled: true
      storage_location: "mlflow_only"      # 최종 출력이므로 중요

# =============================================================================
# Stage 0: 데이터 수집 & 컬럼명 표준화
# =============================================================================
stage_0:
  # 스테이지 실행 여부
  enabled: true
  
  # 컬럼명 표준화 설정
  # - enabled: 한국어 컬럼명을 영어로 변환할지 여부
  # - mapping_file: 한국어-영어 매핑 정의 파일 경로
  column_name_standardization:
    enabled: true
    mapping_file: "metadata/mapping/columns_mapping.json"
  
  # 타겟 컬럼 정의 (YAML 앵커로 다른 스테이지에서 재사용)
  target_column: &target_column "acct_code"
  
  # Stage 0 특정 설정 (전역 save_options 사용)

# =============================================================================
# Stage 1: 스키마/무결성 검증
# =============================================================================
stage_1:
  # 스테이지 실행 여부
  enabled: true
  
  validation:
    enable_validation: true
    validation_rules:
      # 필수 컬럼 검증
      required_columns:
        - *target_column
        - "pur_total"
        - "voucher_key"
      
      # 데이터 타입 검증
      column_types:
        fiscal_year: "numeric"
        pur_total: "numeric"
        txn_date: "string"
      
      # 범위 검증
      value_ranges:
        fiscal_year:
          min: 2000
          max: 2030
        pur_total:
          min: 0
          max: 999999999999
    
  # Stage 1 특정 설정 (전역 save_options 사용)

# =============================================================================
# Stage 2: 데이터 정제 & 필터링
# =============================================================================
stage_2:
  # 스테이지 실행 여부
  enabled: true
  
  # 열 제외
  exclude_columns: []
  
  # 행 필터링
  row_filters:
    fiscal_year:
      operator: "between"
      values: [2019, 2024]
  
  # NULL 값 처리
  drop_null_columns:
    - *target_column
    - "pur_total"
  
  # 중복 제거
  deduplication:
    enabled: true
    subset_columns: ["voucher_key"]
    keep: "first"
  
  # 클래스 필터링
  class_filter:
    min_samples: 2
    target_column: *target_column
  
  # Stage 2 특정 설정 (전역 save_options 사용)

# =============================================================================
# Stage 3: 데이터 클리닝
# =============================================================================
stage_3:
  # 스테이지 실행 여부
  enabled: true
  
  # 결측값 처리
  missing_values:
    # 결측값으로 처리할 패턴들
    patterns:
      - "N/A"
      - "NULL"
      - "nan"
      - "NaN"
      - "null"
      - "None"
      - "none"
      - "#N/A"
      - "#DIV/0!"
    
    # 결측값 처리 전략
    strategy: "drop"  # "drop", "fill", "keep"
    fill_value: "Unknown"  # strategy가 "fill"일 때 사용
  
  # 타겟 컬럼
  target_column: *target_column
  
  # 라벨 매핑 설정
  label_mapping:
    mode: "create_new"
    existing_path: "metadata/mapping/label_mapping.json"
    total_num_classes: 260
    dummy_class_prefix: "DUMMY_"
  
  # Stage 3 특정 설정 (전역 save_options 사용)

# =============================================================================
# Stage 4: 피처 엔지니어링
# =============================================================================
stage_4:
  # 스테이지 실행 여부
  enabled: true
  
  # Robust Standardization 설정 (비활성화됨)
  robust_standardization:
    enable: false
    group_column: "co_vat_id"
    target_column: "pur_total"
    outlier_bounds:
      method: "iqr"
      iqr_multiplier: 1.5
    min_group_size: 3
    min_normal_size: 2
    scaling_range: [1, 100]
    output_column_suffix: "_scaled"
  
  # 추가 피처 생성 (필요시 확장)
  additional_features: []
  
  # Stage 4 특정 설정 (전역 save_options 사용)

# =============================================================================
# Stage 5: 피처 선택
# =============================================================================
stage_5:
  # 스테이지 실행 여부
  enabled: true
  
  # 선택할 피처 컬럼들 (순서가 중요함 - 이 순서대로 텍스트 시퀀스 생성)
  feature_columns:
    - "sp_flag"              # 1. 매출/매입 구분
    - "co_name"              # 2. 회사명
    - "co_vat_id"            # 3. 회사 사업자번호
    - "co_biz_type"          # 4. 회사 업태
    - "co_biz_item"          # 5. 회사 종목
    - "co_industry_code"     # 6. 회사 산업코드
    - "co_tax_type_msg"      # 7. 회사 과세유형
    - "txn_date"             # 8. 전표일자
    - "cust_type_code"       # 9. 거래처유형코드
    - "cp_card_no"           # 10. 상대 카드번호
    - "cust_name"            # 11. 거래처명
    - "cust_code"            # 12. 거래처코드
    - "vat_id"               # 13. 사업자등록번호
    - "biz_type"             # 14. 업태
    - "biz_item"             # 15. 종목
    - "industry_code"        # 16. 산업코드
    - "co_class"             # 17. 기업구분
    - "evidence_code"        # 18. 증빙코드
    - "pur_item"             # 19. 매입 품명
    - "pur_vat"              # 20. 매입 부가세
    - "pur_total"            # 21. 매입 총액
    - "tax_type_msg"         # 22. 과세유형메시지
  
  # 타겟 컬럼 포함
  include_target: true
  target_column: *target_column
  
 
  
  # Stage 5 특정 설정 (전역 save_options 사용)

# =============================================================================
# Stage 6: 데이터 분할
# =============================================================================
stage_6:
  # 스테이지 실행 여부
  enabled: true
  
  splitting:
    extract_ratio: 1.0
    train_ratio: 0.8
    validation_ratio: 0.1
    test_ratio: 0.1
    random_state: 42
    stratify_column: *target_column
    min_samples_per_class: 3
  
  # Stage 6 특정 설정 (전역 save_options 사용)

# =============================================================================
# Stage 7: 스케일러 학습 & 적용 (데이터 누수 방지)
# =============================================================================
stage_7:
  # 스테이지 실행 여부
  enabled: true
  
  scaling:
    enabled: false  # 현재 비활성화 (필요시 활성화)
    method: "standard"  # "standard", "minmax", "robust"
    
    # 스케일링할 컬럼 (숫자형만)
    scaling_features: []
    
    # 스케일러 저장
    save_scaler: true
    scaler_path: "data/06_models/scaler.pkl"
  
  # Stage 2 특정 설정 (전역 save_options 사용)

# =============================================================================
# Stage 8: 피처 문자열 인코딩 / 시퀀스 생성
# =============================================================================
stage_8:
  # 스테이지 실행 여부
  enabled: true
  
  text_encoding:
    # 인코딩 방식
    encoding_method: "sequential"  # "sequential" or "template"
    
    # 순차적 인코딩 설정
    sequential:
      separator: "^ "
      include_column_names: true
      null_replacement: "None"
    
    # 템플릿 기반 인코딩 (옵션)
    template:
      format: "{column}:{value}"
      separator: " | "
    
    # 인코딩할 컬럼 (지정하지 않으면 feature_columns 사용)
    encoding_columns: []
    
    # 결측값 패턴 (None으로 통일)
    missing_value_patterns:
      - "N/A"
      - "NULL"
      - "nan"
      - "NaN"
      - "null"
      - "None"
      - "none"
      - "#N/A"
      - "#DIV/0!"
      - "<NA>"
      - "NaT"
      - ""
  
  # 토크나이저 분석 설정
  tokenizer_analysis:
    # 분석 활성화 여부
    enabled: true
    
    # 실제 토크나이저 사용 여부 (False면 공백 기반 분석)
    use_actual_tokenizer: true
    
    # 사용할 토크나이저 모델
    tokenizer_name: "Qwen/Qwen3-4B"
    
    # 분석할 샘플 수 (-1이면 전체)
    sample_size: 2000000
    
    # top_k 예측 비교 (비활성화)
    top_k_prediction:
      enabled: false
      k_values: [1, 3, 5, 10]  # top-k 값들
      model_name: "klue/roberta-base"  # 예측에 사용할 모델
      
    # 토큰 길이 통계
    token_length_stats:
      enabled: true
      percentiles: [25, 50, 75, 90, 95, 99]
      
    # 결과 저장 경로
    save_results: true
    results_path: "data/05_model_input/tokenizer_analysis.json"
    
  # Stage 8 특정 설정 (전역 save_options 사용)

# =============================================================================
# Stage 9: 데이터 패키징 & 분석
# =============================================================================
stage_9:
  # 스테이지 실행 여부
  enabled: true
  
  # 패키징할 메타데이터 선택 (모델 학습 및 추론에 필수)
  metadata_packaging:
    # 포함할 메타데이터 항목 (true/false로 설정)
    include_label_mapping: true        # 라벨 매핑 (300개 클래스)
    include_feature_columns: true      # 피처 칼럼 목록 및 순서
    include_columns_mapping: true      # 칼럼명 매핑 (한-영)
    include_company_scaling_stats: false # 회사별 스케일링 통계
    include_text_encoding_config: true  # 텍스트 인코딩 설정
    include_target_column: true        # 타겟 칼럼명
    include_split_info: true           # 데이터 분할 정보
  
  packaging:
    # 최종 출력 형식
    output_format: "pickle"
    output_path: "data/05_model_input/dataset_all.pkl"
    
    # 메타데이터 저장
    save_metadata: true
    metadata_path: "data/05_model_input/dataset_metadata.json"
    
  
    
    # 메타데이터 설정 (간단한 true/false 설정) - Stage 순서대로 정리
    metadata_config:
      # Stage 1 메타데이터
      column_statistics: true             # stage_1 컬럼 통계
      validation_results: true            # stage_1 검증 결과
      
      # Stage 2 메타데이터
      filtering_stats: true               # stage_2 필터링 통계
      deduplication_stats: true           # stage_2 중복 제거 통계
      data_quality_metrics: true          # stage_2 데이터 품질 메트릭
      class_distribution: true            # stage_2 클래스 분포
      
      # Stage 3 메타데이터
      label_mapping_stats: true           # stage_3 라벨 매핑 통계
      
      # Stage 4 메타데이터 (비활성화됨)
      # company_scaling_stats: false         # stage_4 회사별 스케일링 통계
      # feature_engineering_summary: false   # stage_4 피처 엔지니어링 요약
      # outlier_detection_stats: false       # stage_4 이상치 탐지 통계
      
      # Stage 5 메타데이터
      num_classes: true                   # stage_5 클래스 수
      target_column: true                 # stage_5 타겟 컬럼명
      feature_columns: true               # stage_5 피처 컬럼 리스트 (순서 포함)
      label_mapping: true                 # stage_5 레이블 매핑 정보
      
      # Stage 6 메타데이터
      split_ratios: true                  # stage_6 데이터 분할 비율
      split_counts: true                  # stage_6 데이터 분할 개수
      
      # Stage 8 메타데이터
      text_separator: true                # stage_8 텍스트 구분자
      text_encoding_config: true          # stage_8 텍스트 인코딩 설정
      tokenizer_analysis: true            # stage_8 토크나이저 분석 결과
      token_length_analysis: true         # stage_8 토큰 길이 분석
      
      # Stage 9 메타데이터
      created_at: true                    # stage_9 생성 시간
      total_samples: true                 # stage_9 전체 샘플 수
      pipeline_metadata: true             # stage_9 파이프라인 메타데이터
  
  # Stage 9 특정 설정 (전역 save_options 사용)

# =============================================================================
# MLflow 설정
# =============================================================================
mlflow:
  enabled: true
  experiment_name: "Accounting_Classification_MLOps_MLflow_Based"
  tracking_uri: "./mlruns"
  
  # 로깅 설정
  logging:
    save_artifacts: true
    log_metrics: true
    log_params: true
    log_metadata: true
    
    # 단계별 체크포인트 저장
    save_stage_checkpoints: true
    checkpoint_stages: [0, 2, 3, 4, 5, 6, 8, 9]  # 주요 단계마다 저장
  
  # 아티팩트 경로 설정
  artifact_paths:
    data: "pipeline_data"         # 데이터 저장 경로
    metadata: "pipeline_metadata" # 메타데이터 저장 경로
    models: "models"              # 모델 저장 경로
  
  # 로컬 복사 설정
  local_copy:
    enabled: false
    base_path: "data"  # 로컬 베이스 경로